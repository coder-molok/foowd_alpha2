// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    return define(['elgg', 'jquery'], factory);
  } else if (typeof exports === 'object') {
    return module.exports = factory();
  } else {
    return root.returnExports = factory();
  }
})(this, function() {
  var $, Div, Input, InputFactory, Maxqt, Minqt, Price, Text, elgg, fac, loom;
  loom = this;
  $ = require('jquery');
  elgg = require('elgg');
  Input = (function() {
    function Input(obj1) {
      var first, that;
      this.obj = obj1;
      this.el = $(this.obj.el);
      this.inpt = $(this.obj.inpt);
      this.key = this.obj.key;
      that = this;
      first = true;
      this.inpt.on("click focus", function() {
        first = false;
      });
      if (this.obj.trigger != null) {
        $(document).on(this.obj.trigger, function() {
          first = false;
          if (!that.check()) {
            return that.error();
          } else {
            return that.clean();
          }
        });
      }
      this.inpt.on("focusout mouseout keyup", function() {
        if (!first) {
          if (!that.check()) {
            return that.error();
          } else {
            return that.clean();
          }
        }
      });

      /*
      @inpt .on "mouseout", ()->
          if !first 
              if not that.check()  
                  that.error()
              else 
                  that.clean()
       */
    }

    Input.prototype.color = function(color) {
      return this.inpt.css({
        "background-color": color
      });
    };

    Input.prototype.check = function() {};

    Input.prototype.error = function() {
      $(".error-" + (this.el.attr('name'))).remove();
      return $('<span/>', {
        "class": "error-" + (this.el.attr('name')),
        "html": elgg.echo(this.msg)
      }).appendTo("label[for*=" + this.key + "]");
    };

    Input.prototype.clean = function() {
      return $(".error-" + (this.el.attr('name'))).remove();
    };

    return Input;

  })();
  Price = (function(superClass) {
    extend(Price, superClass);

    function Price() {
      return Price.__super__.constructor.apply(this, arguments);
    }

    Price.prototype.check = function() {
      var re, v;
      re = new RegExp(/^\d{1,8}(\.\d{0,2})?$/);
      v = this.el.val().trim();
      if (re.test(v) && v !== '') {
        return true;
      } else {
        return false;
      }
    };

    return Price;

  })(Input);
  Minqt = (function(superClass) {
    extend(Minqt, superClass);

    function Minqt() {
      return Minqt.__super__.constructor.apply(this, arguments);
    }

    Minqt.prototype.check = function() {
      var re, v;
      re = new RegExp(/^\d{1,5}(\.\d{0,3})?$/);
      v = this.el.val().trim();
      if (re.test(v) && v !== '') {
        return true;
      } else {
        return false;
      }
    };

    return Minqt;

  })(Input);
  Maxqt = (function(superClass) {
    extend(Maxqt, superClass);

    function Maxqt() {
      return Maxqt.__super__.constructor.apply(this, arguments);
    }

    Maxqt.prototype.check = function() {
      var Max, Min, re;
      re = new RegExp(/^\d{1,5}(\.\d{0,3})?$/);
      Max = this.el.val().trim();
      if (Max === '') {
        true;
      }
      Min = $("[name*=Minqt]").val().trim();
      if (Min === '') {
        this.msg = 'Devi prima inserire la quantit&agrave; massima';
        this.el.val('');
        return false;
      }
      if (!re.test(Max)) {
        this.msg = 'foowd:' + this.key.toLowerCase() + ':error';
        return false;
      }
      console.log(Min + " e " + Max);
      if (parseFloat(Min) > parseFloat(Max)) {
        this.msg = 'foowd:' + this.key.toLowerCase() + ':error:larger';
        return false;
      }
      return true;
    };

    return Maxqt;

  })(Input);
  Text = (function(superClass) {
    extend(Text, superClass);

    function Text() {
      return Text.__super__.constructor.apply(this, arguments);
    }

    Text.prototype.check = function() {
      var v;
      v = this.el.val().trim();
      if (!v) {
        return false;
      } else {
        return true;
      }
    };

    return Text;

  })(Input);

  /*
  class Larger extends Input   
      maxInt = $("[name*=Maxqt-integer]")
      maxDec = $("[name*=Maxqt-decimal]")
      minInt = $("[name*=Minqt-integer]")
      minDec = $("[name*=Minqt-decimal]")
  
  
      check: ->
          v = @el.val().trim()
           * se e' vuoto, allora non ci sono problemi!
          if not isFinite(v) or v is ''
              true
          else
              Max = maxInt.val() + '.' +maxDec.val()
              Min = minInt.val() + '.' +minDec.val()
              #alert "#{Min} e #{Max}"
              if Max < Min then false else true
   */
  Div = (function(superClass) {
    extend(Div, superClass);

    function Div() {
      return Div.__super__.constructor.apply(this, arguments);
    }

    Div.prototype.check = function() {
      var v;
      v = document.querySelectorAll(this.obj.el);
      v = v.length;
      if (v > 0) {
        return true;
      } else {
        return false;
      }
    };

    return Div;

  })(Input);
  InputFactory = (function() {
    var input;

    input = {
      'Name': ['Text'],
      'Price': ['Price'],
      'Minqt': ['Minqt'],
      'Maxqt': ['Maxqt'],
      'Tag': ['Div', '.search-choice', 'foowd:update:tag'],
      'file': ['Div', '#sorgente']
    };

    function InputFactory() {
      var cls, inpt, key, obj, selector, tmp;
      this.factory = [];
      for (key in input) {
        cls = input[key];
        tmp = cls[0].toString();
        inpt = 'input[name*=' + key + ']';
        selector = '[name*=' + key + ']';
        if (key === 'Tag') {
          inpt = '.chosen-choices';
        }
        if (cls[1] != null) {
          selector = cls[1];
        }
        obj = {
          "el": selector,
          "key": key.split('-')[0],
          "inpt": inpt
        };
        if (cls[2] != null) {
          obj.trigger = cls[2];
        }
        tmp = eval("new " + tmp + '(' + JSON.stringify(obj) + ')');
        tmp.msg = 'foowd:' + key.toLowerCase() + ':error';
        this.factory.push(tmp);
      }
    }

    InputFactory.prototype.checkAll = function() {
      var check, i, inpt, len, ref;
      check = true;
      ref = this.factory;
      for (i = 0, len = ref.length; i < len; i++) {
        inpt = ref[i];
        if (!inpt.check()) {
          check = false;
          inpt.error();
        }
      }
      return check;
    };

    return InputFactory;

  })();
  fac = new InputFactory();
  return $('form').on('submit', function(e) {
    if (!fac.checkAll()) {
      e.preventDefault();
      return alert('Devi finire di compilare dei campi');
    }
  });
});
