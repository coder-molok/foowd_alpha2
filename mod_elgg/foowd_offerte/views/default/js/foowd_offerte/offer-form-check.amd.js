// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    return define([], factory);
  } else if (typeof exports === 'object') {
    return module.exports = factory();
  } else {
    return root.returnExports = factory();
  }
})(this, function() {
  var $, Div, Input, InputFactory, Larger, Price, Text, fac, loom;
  loom = this;
  $ = require('jquery');
  Input = (function() {
    function Input(obj1) {
      var first, that;
      this.obj = obj1;
      this.el = $(this.obj.el);
      this.inpt = $(this.obj.inpt);
      this.key = this.obj.key;
      if (this.obj.trigger != null) {
        $(document).on(this.obj.trigger, function() {
          var first;
          first = false;
          if (!that.check()) {
            return that.error();
          } else {
            return that.clean();
          }
        });
      }
      that = this;
      first = true;
      this.inpt.on("focusout keydown click", function() {
        first = false;
        if (!that.check()) {
          return that.error();
        } else {
          return that.clean();
        }
      });
      this.inpt.on("mouseout", function() {
        if (!first) {
          if (!that.check()) {
            return that.error();
          } else {
            return that.clean();
          }
        }
      });
    }

    Input.prototype.color = function(color) {
      return this.inpt.css({
        "background-color": color
      });
    };

    Input.prototype.check = function() {};

    Input.prototype.error = function() {
      this.color("rgba(255, 0, 0, 0.17)");
      $(".error-" + (this.el.attr('name'))).remove();
      $('<span/>', {
        "class": "error-" + (this.el.attr('name')),
        "html": this.msg
      }).appendTo("label[for*=" + this.key + "]");
      return console.log("appeso " + this.key);
    };

    Input.prototype.clean = function() {
      $(".error-" + (this.el.attr('name'))).remove();
      return this.color('');
    };

    return Input;

  })();
  Price = (function(superClass) {
    extend(Price, superClass);

    function Price() {
      return Price.__super__.constructor.apply(this, arguments);
    }

    Price.prototype.check = function() {
      var v;
      v = this.el.val().trim();
      if (isFinite(v) && v !== '') {
        return true;
      } else {
        return false;
      }
    };

    return Price;

  })(Input);
  Text = (function(superClass) {
    extend(Text, superClass);

    function Text() {
      return Text.__super__.constructor.apply(this, arguments);
    }

    Text.prototype.check = function() {
      var v;
      v = this.el.val().trim();
      if (!v) {
        return false;
      } else {
        return true;
      }
    };

    return Text;

  })(Input);
  Larger = (function(superClass) {
    var maxDec, maxInt, minDec, minInt;

    extend(Larger, superClass);

    function Larger() {
      return Larger.__super__.constructor.apply(this, arguments);
    }

    maxInt = $("[name*=Maxqt-integer]");

    maxDec = $("[name*=Maxqt-decimal]");

    minInt = $("[name*=Minqt-integer]");

    minDec = $("[name*=Minqt-decimal]");

    Larger.prototype.check = function() {
      var Max, Min, v;
      v = this.el.val().trim();
      if (!isFinite(v) || v === '') {
        return true;
      } else {
        Max = maxInt.val() + '.' + maxDec.val();
        Min = minInt.val() + '.' + minDec.val();
        if (Max < Min) {
          return false;
        } else {
          return true;
        }
      }
    };

    return Larger;

  })(Input);
  Div = (function(superClass) {
    extend(Div, superClass);

    function Div() {
      return Div.__super__.constructor.apply(this, arguments);
    }

    Div.prototype.check = function() {
      var v;
      console.log(this.obj.el);
      v = document.querySelectorAll(this.obj.el);
      v = v.length;
      console.log(v + " fatto");
      if (v > 0) {
        return true;
      } else {
        return false;
      }
    };

    return Div;

  })(Input);
  InputFactory = (function() {
    var input;

    input = {
      'Name': ['Text', 'Il campo non puo\' essere vuoto'],
      'Minqt-integer': ['Price', 'Il campo e\' obbligatorio'],
      'Maxqt-integer': ['Larger', 'La quantita\' massima deve superare o eguagliare quella minima.<br/>    Se non vuoi inserire un massimo, cancella i numeri dal campo sottostante. '],
      'Price-integer': ['Price', 'Il campo e\' obbligatorio'],
      'Tag': ['Div', 'Devi selezionare almeno un tag', '.search-choice', 'foowd:update:tag'],
      'file': ['Div', 'Non hai aggiunto alcuna immagine', '#sorgente', 'foowd:update:file']
    };

    function InputFactory() {
      var cls, inpt, key, obj, selector, tmp;
      this.factory = [];
      for (key in input) {
        cls = input[key];
        tmp = cls[0].toString();
        inpt = 'input[name*=' + key + ']';
        selector = '[name*=' + key + ']';
        if (key === 'Tag') {
          inpt = '.chosen-choices';
        }
        if (cls[2] != null) {
          selector = cls[2];
        }
        obj = {
          "el": selector,
          "key": key.split('-')[0],
          "inpt": inpt
        };
        if (cls[3] != null) {
          obj.trigger = cls[3];
        }
        tmp = eval("new " + tmp + '(' + JSON.stringify(obj) + ')');
        tmp.msg = cls[1];
        this.factory.push(tmp);
      }
    }

    InputFactory.prototype.checkAll = function() {
      var check, i, inpt, len, ref;
      check = true;
      ref = this.factory;
      for (i = 0, len = ref.length; i < len; i++) {
        inpt = ref[i];
        if (!inpt.check()) {
          check = false;
          inpt.error();
        }
      }
      return check;
    };

    return InputFactory;

  })();
  fac = new InputFactory();
  return $('form').on('submit', function(e) {
    if (!fac.checkAll()) {
      e.preventDefault();
      return alert('Devi finire di compilare dei campi');
    }
  });
});
