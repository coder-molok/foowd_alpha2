// Generated by CoffeeScript 1.9.3
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    return define(['elgg', 'jquery'], factory);
  } else if (typeof exports === 'object') {
    return module.exports = factory();
  } else {
    return root.returnExports = factory();
  }
})(this, function() {
  var $, $wSize, Gobj, LoadPop, PrevWindow, elgg, preview, scale;
  Gobj = (function() {
    function Gobj() {
      if (!(this instanceof Gobj)) {
        alert('costruisco');
        return new Gobj();
      }
    }

    return Gobj;

  })();
  elgg = require('elgg');
  $ = require('jquery');
  Gobj.prototype.setInit = function(obj) {
    var index, j, len, needle, prop, val;
    this.nocss = false;
    needle = ['urlF', 'loadedImgContainer', 'sourceImg', 'fileInput', 'imgContainer', 'css'];
    for (prop in obj) {
      val = obj[prop];
      this[prop] = val;
      index = needle.indexOf(prop);
      if (index > -1) {
        needle.splice(index, 1);
      }
    }
    for (j = 0, len = needle.length; j < len; j++) {
      val = needle[j];
      console.log(val + " not setted: plugin could bump into errors");
    }
    this.JloadedImgContainer = $(this.loadedImgContainer);
    this.JfileInput = $(this.fileInput);
    this.JsourceImg = $(this.sourceImg);
    this.JimgContainer = $(this.sourceImg);
  };
  Gobj.prototype.setStyle = function() {
    var cssToLoad, j, len, results, val;
    if (!this.nocss) {
      cssToLoad = [].concat(this.css);
      results = [];
      for (j = 0, len = cssToLoad.length; j < len; j++) {
        val = cssToLoad[j];
        if (!$('link[href="' + val + '"]').length) {
          results.push($('<link href="' + val + '" rel="stylesheet">').appendTo("head"));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };
  Gobj.prototype.initialize = function(obj) {
    var that;
    this.setInit(obj);
    this.setStyle();
    that = this;
    $(window).on('load', (function(_this) {
      return function() {
        var w;
        w = 400;
        if (_this.JsourceImg.length !== 1) {
          return;
        }
        alert('rivedere questa parte');
      };
    })(this));
    this.JfileInput.on('change', function(e) {
      var file, formData, pop, xhr;
      if (!this.value.match(/\.(jpg|jpeg|png|gif)$/i)) {
        alert('Sono validi solo formati jpg - jpeg - png - gif');
        this.value = '';
        return;
      }
      file = this.files[0];
      formData = new FormData();
      formData.append(this.name, file);
      pop = new LoadPop();
      xhr = new XMLHttpRequest();
      xhr.addEventListener('progress', function(e) {
        var done, percent, total;
        done = e.position || e.loaded;
        total = e.totalSize || e.total;
        percent = Math.floor(done / total * 1000);
        if (!isFinite(percent)) {
          percent = 100;
        }
        return pop.progress(percent);
      }, false);
      if (xhr.upload) {
        xhr.upload.onprogress = function(e) {
          var done, percent, total;
          done = e.position || e.loaded;
          total = e.totalSize || e.total;
          percent = Math.floor(done / total * 1000);
          if (!isFinite(percent)) {
            percent = 100;
          }
          return pop.progress(percent);
        };
      }
      xhr.onreadystatechange = function(e) {
        if (4 === this.readyState) {
          pop.complete();
          console.log(['xhr upload complete', e]);
          try {
            obj = JSON.parse(this.responseText);
          } catch (_error) {
            e = _error;
            alert('invalid json');
          }
          if (obj == null) {
            return;
          }
          return that.Jimg = $('<img/>').attr('src', obj.preSrc + obj.src).load(function() {
            var div, w;
            w = 400;
            this.height *= w / this.width;
            this.width = w;
            $(this).css({
              'width': this.width,
              'height': this.height
            });
            that.JimgContainer.css({
              'display': ''
            });
            div = that.JloadedImgContainer;
            div.html('');
            $(this).appendTo(div);
            $(document).trigger("foowd:update:file");
            that.start();
          });
        }
      };
      xhr.open('post', that.urlF, true);
      xhr.send(formData);
    });
  };
  scale = {
    setScale: function(num) {
      this.w = Math.round(num * scale.x);
      this.h = Math.round(num * scale.y);
      this.k = Math.min(scale.x, scale.y);
      this.l = Math.min(scale.w, scale.h);
      this.r = this.h / this.w;
      this.w = this.l;
      return this.h = this.l / this.r;
    },
    setL: function(l1, l2) {
      return this.l = Math.min(l1, l2);
    }
  };
  LoadPop = function() {
    if (!(this instanceof LoadPop)) {
      return new LoadPop();
    }
    this.div = document.createElement("div");
    this.div.className = 'foowd-lightbox';
    document.body.appendChild(this.div);
    this.box = document.createElement('div');
    this.box.className = 'progress-container';
    this.div.appendChild(this.box);
    this.x = document.createElement("PROGRESS");
    this.x.className = 'progress-bar';
    this.x.max = 100;
    this.x.value = 0;
    this.box.appendChild(this.x);
    this.t = document.createElement("span");
    this.t.className = 'progress-value';
    this.t.innerHTML = '0 %';
    this.box.appendChild(this.t);
    this.box.style.left = ($wSize.w - this.box.offsetWidth) / 2 + 'px';
    this.box.style.top = ($wSize.h - this.box.offsetHeight) / 2 + 'px';
    this.progress = function(percent) {
      this.x.value = Math.floor(percent);
      this.t.innerHTML = Math.floor(percent) + ' %';
    };
    this.complete = function() {
      this.div.remove();
    };
  };
  $wSize = (function() {
    var d, e, g, w, x, y;
    w = window;
    d = document;
    e = d.documentElement;
    g = d.getElementsByTagName('body')[0];
    x = w.innerWidth || e.clientWidth || g.clientWidth;
    y = w.innerHeight || e.clientHeight || g.clientHeight;
    return {
      'w': x,
      'h': y
    };
  })();
  Gobj.prototype.start = function() {
    var $ias, ar, decimals, div, i, j, len, oldCrop, src, tmp, val, variable, x;
    decimals = 100000;
    if (this.Jimg.width() >= this.Jimg.height()) {
      scale.x = Math.round(decimals * this.Jimg.width() / this.Jimg.height()) / decimals;
      scale.y = 1;
    } else {
      scale.x = 1;
      scale.y = Math.round(decimals * this.Jimg.height() / this.Jimg.width()) / decimals;
    }
    div = this.Jimg;
    if (!div.length) {
      alert('div not exists');
    }
    src = div.attr('src');
    if (!src) {
      alert('src not exists');
    }
    i = $preWindos.length;
    while(i--){
            $preWindos[i].remove();
            $preWindos.splice(i);
        };
    scale.setScale(100);
    $preWindos.push(new PrevWindow('small', div, scale));
    scale.setScale(250);
    $preWindos.push(new PrevWindow('medium', div, scale));
    x = document.querySelectorAll('[class^=imgareaselect]');
    for ( i = 0; i < x.length; i++) {
            x[i].remove();
        };
    scale.setL(div.width, div.height);
    ar = ['x1', 'x2', 'y1', 'y2'];
    oldCrop = {};
    for (i = j = 0, len = ar.length; j < len; i = ++j) {
      variable = ar[i];
      tmp = ar[i];
      val = $('input[name="crop_' + $init.JfileInput.attr('name') + '[' + tmp + ']"]').val();
      $Jcrop[tmp] = $('input[name="crop_' + $init.JfileInput.attr('name') + '[' + tmp + ']"]');
      console.log($('input[name="crop_' + $init.JfileInput.attr('name') + '[' + tmp + ']"]').length);
      if (val === '') {
        switch (tmp) {
          case 'x1':
            oldCrop.x1 = Math.round((this.Jimg.width() - scale.l) / 2);
            break;
          case 'x2':
            oldCrop.x2 = Math.round(scale.l + oldCrop.x1);
            break;
          case 'y1':
            oldCrop.y1 = Math.round((this.Jimg.height() - scale.l) / 2);
            break;
          case 'y2':
            oldCrop.y2 = Math.round(scale.l + oldCrop.y1);
        }
      } else {
        if (tmp === 'x1' || tmp === 'x2') {
          oldCrop[tmp] = val * this.Jimg.width();
        }
        if (tmp === 'y1' || tmp === 'y2') {
          oldCrop[tmp] = val * this.Jimg.height();
        }
      }
    }
    $ias = div.imgAreaSelect({
      instance: true
    });
    $ias.setOptions({
      handles: true,
      onInit: preview,
      onSelectChange: preview,
      x1: oldCrop.x1,
      y1: oldCrop.y1,
      x2: oldCrop.x2,
      y2: oldCrop.y2,
      show: true,
      minWidth: 50,
      minHeight: 50
    });
  };
  PrevWindow = function(size, div, scale) {
    var box, prevBox, src, title;
    this.x = scale.w;
    this.y = scale.h;
    this.r = scale.r;
    box = div.attr("id") + '-' + size;
    src = div.attr("src");
    prevBox = $('#prev-container');
    if (!prevBox.length) {
      prevBox = $('<div/>', {
        'id': 'prev-container'
      }).insertAfter(div.parent());
    }
    this.Jpre = $('<div><img id="' + box + '" src="' + src + '" style="width:' + scale.w + 'px; height:' + scale.h + 'px;" /><div>').css({
      overflow: 'hidden',
      width: scale.w + 'px',
      height: scale.h + 'px'
    }).appendTo(prevBox);
    this.Jpre.wrap('<div class=\'prev-single-container\' style="display:inline;"></div>');
    this.prevSingle = $('.prev-single-container').css({
      'display': 'inline-block'
    });
    title = $('<div>Preview ' + size + '</div>').css({
      'class': "prev-title",
      'style': "margin-top: 5px, padding: 2px",
      'background-color': 'rgba(70, 144, 214, 0.8)',
      'width': this.Jpre.width()
    });
    this.Jpre.parent().css({
      position: 'relative',
      margin: $margin
    }).prepend(title);
    this.divj = $('#' + box);
    this.draw = function(img, selection) {
      var ratiox, ratioy, scaleX, scaleY;
      ratiox = selection.width / img.width;
      ratioy = selection.height / img.height;
      scaleX = this.x / (ratiox || 1);
      scaleY = scaleX * this.r;
      this.divj.css({
        width: Math.round(scaleX) + 'px',
        height: Math.round(scaleY) + 'px',
        marginLeft: '-' + Math.round(scaleX * selection.x1 / img.width) + 'px',
        marginTop: '-' + Math.round(scaleY * selection.y1 / img.height) + 'px'
      });
      this.Jpre.css({
        'height': Math.round(this.x * selection.height / selection.width) + 'px'
      });
    };
    this.remove = function() {
      this.Jpre.parent().remove();
    };
  };
  preview = function(img, selection) {
    var normalized, property, value, x1, x2, y1, y2;
    if (selection.height < selection.width || selection.height > 2 * selection.width) {
      x1 = $ias.getOptions().x1;
      x2 = $ias.getOptions().x2;
      y1 = $ias.getOptions().y1;
      y2 = $ias.getOptions().y2;
      $ias.setSelection(x1, y1, x2, y2);
      $ias.update();
      return false;
    }
    for( i in $preWindos){
            $preWindos[i].draw(img, selection);
        };
    normalized = {};
    normalized.x1 = selection.x1 / img.width;
    normalized.x2 = selection.x2 / img.width;
    normalized.y1 = selection.y1 / img.height;
    normalized.y2 = selection.y2 / img.height;
    for (property in normalized) {
      value = normalized[property];
      normalized[property] = Math.round(100000 * normalized[property]) / 100000;
      $Jcrop[property].val(normalized[property]);
    }
    $ias.setSelection(selection.x1, selection.y1, selection.x2, selection.y2);
    $ias.setOptions({
      x1: selection.x1,
      y1: selection.y1,
      x2: selection.x2,
      y2: selection.y2
    });
    $ias.update();
  };
  return {
    create: function() {
      return new Gobj();
    }
  };
});
